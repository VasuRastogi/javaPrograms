/*
Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

 

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1
 

Constraints:

3 <= arr.length <= 104
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array.
 

Follow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?
*/

package Java.testingJava;

public class Solution {
    public static int peakIndexInMountainArray(int[] arr) {
        int hi = arr.length-1;
        int lo = 0;
        while(lo<hi){
            int mid = lo+(hi-lo)/2;
            if(arr[mid+1]<arr[mid]){
                hi = mid;
            }else if(arr[mid+1]>arr[mid]){
                lo = mid+1;
            }
        }
        return hi;
    }
    public static void main(String[]args){
        int[] arr = new int[]{1,3,5,7,6,4,2};
        System.out.println(peakIndexInMountainArray(arr));
    }
}

